name: Postman Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - postman-test-pipeline.yaml

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
# pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'UdacityDS-51'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  displayName: Build
  pool:
    # name: Default
    vmImage: $(vmImageName)
  # environment:
  #   name: test
  #   resourceType: VirtualMachine
  #   tags: selenium
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#
    # Postman - Install Newman
    - task: NodeTool@0
      displayName: Install Node v16.X
      inputs:
        versionSpec: '16.x'

    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)

    # # Postman - Install Newman
    # - task: CmdLine@2
    #   displayName: Install Newman
    #   inputs:
    #     script: |
    #       sudo apt-get -y install npm
    #       sudo npm cache clean -f
    #       sudo npm install -g n
    #       sudo n stable
    #       sudo npm install -g newman
    #     workingDirectory: $(projectRoot)

    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman Regression Test Suite
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        # testResultsFiles: '$(System.DefaultWorkingDirectory)/*.xml'
        searchFolder: 'automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Publish test results'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        replaceExistingArchive: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

- stage: SeleniumTests
  jobs:
    - deployment: SeleniumTests
      environment:
        name:  'test'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Bash@3
              displayName: Selenium installs
              inputs:
                targetType: 'inline'
                script: |           
                  #!/bin/bash

                  sudo apt-get update -y
                  sudo apt-get upgrade -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  sudo apt-get install -y chromium-chromedriver
                  sudo apt-get install software-properties-common
                  sudo apt-get install -y python-selenium
                  pip3 install selenium
            - task: Bash@3
              displayName: Selenium Tests
              inputs:
                targetType: 'inline'
                script: | 
                  #!/bin/bash
                          
                  cd $(Pipeline.Workspace)/drop-uitests
                  unzip -o $(Build.BuildId)-uitests.zip
                  
                  rm -rf /var/log/selenium
                  sudo mkdir -p /var/log/selenium
                  sudo chmod 777 /var/log/selenium
                  
                  python3 -u login.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log

                  cd $(System.DefaultWorkingDirectory)
                  
                  rm -rf log/selenium
                  mkdir -p log/selenium
              
                  sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            - task: PublishPipelineArtifact@1
              displayName: Publish Selenium Logs
              inputs:
                targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
                artifactName: 'drop-selenium-logs'